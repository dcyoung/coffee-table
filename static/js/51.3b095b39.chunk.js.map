{"version":3,"file":"static/js/51.3b095b39.chunk.js","mappings":"uPAiBA,EAXyB,SAAC,GAGU,IAFhCA,EAE+B,EAF/BA,IACGC,GAC4B,YACvBC,GAAUC,EAAAA,EAAAA,GAAQH,GAAlBE,MAER,OACI,8BAAWE,OAAQF,GAAWD,GAErC,E,8ECTYI,EAA0B,SAAC,GAA+B,IAA1BJ,EAAyB,oBACpE,OACE,oCAAUA,GAAV,eACE,wBAAaK,KAAM,CAAC,MAAO,KAAM,UACjC,iCAAsBC,MAAO,aAGlC,EASYC,EAAc,SAAC,GAQU,IAPpCC,EAOmC,EAPnCA,WACAC,EAMmC,EANnCA,UAMmC,IALnCC,eAAAA,OAKmC,MALlB,EAKkB,MAJnCC,oBAAAA,OAImC,MAJb,EACnB,IAAIC,EAAAA,YAAoBC,iBAAiB,IAAID,EAAAA,QAAc,EAAG,EAAG,GAAI,IAGrC,EADhCZ,GACgC,YAC7Bc,GAAmB,IAAIF,EAAAA,YAAoBG,KAAKJ,EAAoB,IACpEK,GAAUC,EAAAA,EAAAA,QAAoB,MAC9BC,GAASC,EAAAA,EAAAA,MAsCf,OApCAC,EAAAA,EAAAA,IAAS,YAAgB,IAAbC,EAAY,EAAZA,MACV,GAAKL,EAAQM,QAAb,CAIA,IAAMC,EAASZ,EAAoBa,OAAS,EAC5C,GAAID,GAAU,EACZP,EAAQM,QAAQG,0BAA0BX,OAD5C,CAKA,IAAMY,EAAc,EAAIH,EAGxBZ,EAAoBgB,SAAQ,SAACC,EAAmBC,GAC9C,IACMC,GADUD,EAAgB,GACRN,EACxB,KAAIO,EAAQ,IAAMZ,EAAOa,QAAQD,EAAOJ,GAAxC,CAIA,IAAMM,EAAkBrB,EAAoBkB,EAAiB,GACvDI,EAAWf,EAAOgB,MAAMJ,EAAOJ,GAGrCZ,EAAgBqB,iBAAiBH,EAAiBJ,EAAmBK,GACrEjB,EAAQM,QAAQG,0BAA0BX,EAPzC,CAQF,IAGD,IAAMsB,EAAIf,EAAMgB,iBAChBrB,EAAQM,QAAQgB,SAASC,GAAK,IAAOC,KAAKC,IAAI,EAAIL,GAClDpB,EAAQM,QAAQoB,SAASC,GAAK,IAAOH,KAAKI,IAAI,GAAMR,GACpDpB,EAAQM,QAAQoB,SAASH,GAAK,IAAOC,KAAKI,IAAI,GAAMR,EAxBnD,CANA,CA+BF,KAGC,kCAAOS,IAAK7B,GAAahB,GAAzB,cACE,UAAC,EAAA8C,SAAD,CAAUC,UAAU,SAAC3C,EAAD,IAApB,WACE,SAAC,EAAD,CAAWL,IAAKS,EAAY,aAAYE,IAEtCD,EAAUuC,KAAI,SAACjD,EAAKkD,GAClB,OAAO,SAAC,EAAD,CACLlD,IAAKA,EAEL,aAAYW,GAHP,sBAEeuC,GAEvB,SAKV,C,oPCjFYC,EAAkB,SAAC,GAAD,IAAMlD,EAAN,2BAA+BO,EAAAA,EAAAA,KAAY,QACtEC,WAAY2C,EACZ1C,UAAW,CAAC2C,GACZ1C,eAAgB,EAChBC,oBAAqB,EAChB,IAAIC,EAAAA,YAAoBC,iBAAiB,IAAID,EAAAA,QAAc,EAAG,EAAG,GAAI,KAEvEZ,GAPwB,EAU/B,G","sources":["components/modelBase.tsx","components/coasterBase.tsx","components/coasters/catalina/model.tsx"],"sourcesContent":["import { useGLTF } from '@react-three/drei'\n\nexport declare interface ModelBaseProps {\n    url: string;\n}\n\nexport const ModelBase = ({\n    url,\n    ...props\n}: ModelBaseProps): JSX.Element => {\n    const { scene } = useGLTF(url);\n\n    return (\n        <primitive object={scene} {...props} />\n    );\n}\n\nexport default ModelBase;","import { Suspense, useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport ModelBase from \"./modelBase\";\nimport { useScroll } from \"@react-three/drei\";\n\nexport const CoasterModelPlaceholder = ({ ...props }): JSX.Element => {\n  return (\n    <mesh {...props}>\n      <boxGeometry args={[101.6, 12.7, 101.6]}></boxGeometry>\n      <meshStandardMaterial color={'beige'} />\n    </mesh>\n  );\n}\n\nexport declare interface CoasterBaseProps {\n  urlCoaster: string;\n  urlsWater: string[];\n  importRotation: number;\n  orientationSequence: THREE.Quaternion[];\n}\n\nexport const CoasterBase = ({\n  urlCoaster,\n  urlsWater,\n  importRotation = 0.0,\n  orientationSequence = [\n    (new THREE.Quaternion()).setFromAxisAngle(new THREE.Vector3(0, 1, 0), 0)\n  ],\n  ...props\n}: CoasterBaseProps): JSX.Element => {\n  const currOrientation = (new THREE.Quaternion()).copy(orientationSequence[0]);\n  const coaster = useRef<THREE.Group>(null!);\n  const scroll = useScroll();\n\n  useFrame(({ clock }) => {\n    if (!coaster.current) {\n      return;\n    }\n\n    const nPages = orientationSequence.length - 1;\n    if (nPages <= 0) {\n      coaster.current.setRotationFromQuaternion(currOrientation);\n      return;\n    }\n    \n    const distPerPage = 1 / nPages;\n    // scroll.offset = current scroll position, between 0 and 1, dampened\n    // scroll.delta = current delta, between 0 and 1, dampened\n    orientationSequence.forEach((targetOrientation, orientationIdx) => {\n      const pageIdx = orientationIdx -1;\n      const start = pageIdx / nPages;\n      if (start < 0 || !scroll.visible(start, distPerPage)){\n        return;\n      }\n\n      const prevOrientation = orientationSequence[orientationIdx - 1];\n      const progress = scroll.range(start, distPerPage);\n      \n      // Set orientation based on scroll\n      currOrientation.slerpQuaternions(prevOrientation, targetOrientation, progress);\n      coaster.current.setRotationFromQuaternion(currOrientation);\n    });\n    \n    // add slight hover effect\n    const t = clock.getElapsedTime()\n    coaster.current.position.y += 0.01 * Math.sin(1 * t);\n    coaster.current.rotation.z += 0.01 * Math.cos(0.5 * t);\n    coaster.current.rotation.y += 0.01 * Math.cos(0.7 * t);\n  })\n\n  return (\n    <group ref={coaster} {...props}>\n      <Suspense fallback={<CoasterModelPlaceholder></CoasterModelPlaceholder>}>\n        <ModelBase url={urlCoaster} rotation-y={importRotation}></ModelBase>\n        {\n          urlsWater.map((url, idx) => {\n            return <ModelBase\n              url={url}\n              key={`water-model-${idx}`}\n              rotation-y={importRotation}></ModelBase>;\n          })\n        }\n      </Suspense>\n    </group>\n  );\n}\n\nexport default CoasterBase;","import * as THREE from \"three\";\nimport { CoasterBase } from \"../../coasterBase\";\nimport MODEL_PATH_WATER from \"./water.glb\";\nimport MODEL_PATH_COASTER from \"./coaster.glb\";\n\nexport const CoasterCatalina = ({ ...props }): JSX.Element => CoasterBase({\n    urlCoaster: MODEL_PATH_COASTER,\n    urlsWater: [MODEL_PATH_WATER],\n    importRotation: 0,\n    orientationSequence: [\n        (new THREE.Quaternion()).setFromAxisAngle(new THREE.Vector3(0, 1, 0), 0)\n    ],\n    ...props,\n});\n\nexport default CoasterCatalina;"],"names":["url","props","scene","useGLTF","object","CoasterModelPlaceholder","args","color","CoasterBase","urlCoaster","urlsWater","importRotation","orientationSequence","THREE","setFromAxisAngle","currOrientation","copy","coaster","useRef","scroll","useScroll","useFrame","clock","current","nPages","length","setRotationFromQuaternion","distPerPage","forEach","targetOrientation","orientationIdx","start","visible","prevOrientation","progress","range","slerpQuaternions","t","getElapsedTime","position","y","Math","sin","rotation","z","cos","ref","Suspense","fallback","map","idx","CoasterCatalina","MODEL_PATH_COASTER","MODEL_PATH_WATER"],"sourceRoot":""}