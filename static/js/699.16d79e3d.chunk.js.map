{"version":3,"file":"static/js/699.16d79e3d.chunk.js","mappings":"wPAiBA,EAXyB,SAAC,GAGU,IAFhCA,EAE+B,EAF/BA,IACGC,GAC4B,YACvBC,GAAUC,EAAAA,EAAAA,GAAQH,GAAlBE,MAER,OACI,8BAAWE,OAAQF,GAAWD,GAErC,E,8CCVYI,EAA0B,SAAC,GAA+B,IAA1BJ,EAAyB,oBACpE,OACE,oCAAUA,GAAV,eACE,wBAAaK,KAAM,CAAC,MAAO,KAAM,UACjC,iCAAsBC,MAAO,aAGlC,EAQYC,EAAc,SAAC,GAKU,IAJpCC,EAImC,EAJnCA,WACAC,EAGmC,EAHnCA,UAGmC,IAFnCC,eAAAA,OAEmC,MAFlB,EAEkB,EADhCV,GACgC,YAC7BW,GAAUC,EAAAA,EAAAA,QAAoB,MAapC,OAXAC,EAAAA,EAAAA,IAAS,YAAgB,IAAbC,EAAY,EAAZA,MACV,GAAKH,EAAQI,QAAb,CAGA,IAAMC,EAAIF,EAAMG,iBAChBN,EAAQI,QAAQG,SAASC,EAAIC,EAAAA,UAAAA,KAAqBT,EAAQI,QAAQG,SAASC,EAAGE,KAAKC,IAAIN,EAAI,GAAK,GAAK,IAAM,IAC3GL,EAAQI,QAAQG,SAASK,EAAIH,EAAAA,UAAAA,KAAqBT,EAAQI,QAAQG,SAASK,EAAGF,KAAKG,IAAIR,EAAI,GAAK,GAAI,IACpGL,EAAQI,QAAQG,SAASO,EAAIL,EAAAA,UAAAA,KAAqBT,EAAQI,QAAQG,SAASO,EAAGJ,KAAKG,IAAIR,EAAI,GAAK,GAAI,IACpGL,EAAQI,QAAQW,SAASH,EAAIH,EAAAA,UAAAA,KAAqBT,EAAQI,QAAQW,SAASH,IAAK,EAAIF,KAAKG,IAAIR,EAAI,IAAM,EAAG,GALzG,CAMF,KAGC,kCAAOW,IAAKhB,GAAaX,GAAzB,cACE,UAAC,EAAA4B,SAAD,CAAUC,UAAU,SAACzB,EAAD,IAApB,WACE,SAAC,EAAD,CAAWL,IAAKS,EAAY,aAAYE,IAEtCD,EAAUqB,KAAI,SAAC/B,GAAU,OAAO,SAAC,EAAD,CAAWA,IAAKA,EAAK,aAAYW,GAA8B,SAKxG,C,0OC7CYqB,EAAkB,SAAC,GAAD,IAAM/B,EAAN,2BAA+BO,EAAAA,EAAAA,KAAY,QACtEC,WAAYwB,EACZvB,UAAW,CAACwB,GACZvB,eAAgB,GACbV,GAJwB,EAO/B,G","sources":["components/modelBase.tsx","components/coasterBase.tsx","components/coasters/monterey/model.tsx"],"sourcesContent":["import { useGLTF } from '@react-three/drei'\n\nexport declare interface ModelBaseProps {\n    url: string;\n}\n\nexport const ModelBase = ({\n    url,\n    ...props\n}: ModelBaseProps): JSX.Element => {\n    const { scene } = useGLTF(url);\n\n    return (\n        <primitive object={scene} {...props} />\n    );\n}\n\nexport default ModelBase;","import { Suspense, useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport ModelBase from \"./modelBase\";\n\nexport const CoasterModelPlaceholder = ({ ...props }): JSX.Element => {\n  return (\n    <mesh {...props}>\n      <boxGeometry args={[101.6, 12.7, 101.6]}></boxGeometry>\n      <meshStandardMaterial color={'beige'} />\n    </mesh>\n  );\n}\n\nexport declare interface CoasterBaseProps {\n  urlCoaster: string;\n  urlsWater: string[];\n  importRotation: number;\n}\n\nexport const CoasterBase = ({\n  urlCoaster,\n  urlsWater,\n  importRotation = 0.0,\n  ...props\n}: CoasterBaseProps): JSX.Element => {\n  const coaster = useRef<THREE.Group>(null!);\n\n  useFrame(({ clock }) => {\n    if (!coaster.current) {\n      return;\n    }\n    const t = clock.getElapsedTime()\n    coaster.current.rotation.z = THREE.MathUtils.lerp(coaster.current.rotation.z, Math.cos(t / 2) / 20 + 0.25, 0.1)\n    coaster.current.rotation.y = THREE.MathUtils.lerp(coaster.current.rotation.y, Math.sin(t / 4) / 20, 0.1)\n    coaster.current.rotation.x = THREE.MathUtils.lerp(coaster.current.rotation.x, Math.sin(t / 8) / 20, 0.1)\n    coaster.current.position.y = THREE.MathUtils.lerp(coaster.current.position.y, (-2 + Math.sin(t / 2)) / 2, 0.1)\n  })\n\n  return (\n    <group ref={coaster} {...props}>\n      <Suspense fallback={<CoasterModelPlaceholder></CoasterModelPlaceholder>}>\n        <ModelBase url={urlCoaster} rotation-y={importRotation}></ModelBase>\n        {\n          urlsWater.map((url) => { return <ModelBase url={url} rotation-y={importRotation}></ModelBase> })\n        }\n      </Suspense>\n    </group>\n  );\n}\n\nexport default CoasterBase;","import { CoasterBase } from \"../../coasterBase\";\nimport MODEL_PATH_WATER from \"./water.glb\";\nimport MODEL_PATH_COASTER from \"./coaster.glb\";\n\nexport const CoasterMonterey = ({ ...props }): JSX.Element => CoasterBase({\n    urlCoaster: MODEL_PATH_COASTER, \n    urlsWater: [MODEL_PATH_WATER], \n    importRotation: 0,\n    ...props,\n});\n\nexport default CoasterMonterey;"],"names":["url","props","scene","useGLTF","object","CoasterModelPlaceholder","args","color","CoasterBase","urlCoaster","urlsWater","importRotation","coaster","useRef","useFrame","clock","current","t","getElapsedTime","rotation","z","THREE","Math","cos","y","sin","x","position","ref","Suspense","fallback","map","CoasterMonterey","MODEL_PATH_COASTER","MODEL_PATH_WATER"],"sourceRoot":""}