{"version":3,"file":"static/js/496.e7785c07.chunk.js","mappings":"wPAiBA,EAXyB,SAAC,GAGU,IAFhCA,EAE+B,EAF/BA,IACGC,GAC4B,YACvBC,GAAUC,EAAAA,EAAAA,GAAQH,GAAlBE,MAER,OACI,8BAAWE,OAAQF,GAAWD,GAErC,E,0CCVYI,EAA0B,SAAC,GAA+B,IAA1BJ,EAAyB,oBACpE,OACE,oCAAUA,GAAV,eACE,wBAAaK,KAAM,CAAC,MAAO,KAAM,UACjC,iCAAsBC,MAAO,aAGlC,EAQYC,EAAc,SAAC,GAKU,IAJpCC,EAImC,EAJnCA,KAImC,IAHnCC,eAAAA,OAGmC,MAHlB,EAGkB,MAFnCC,YAAAA,OAEmC,OAFpB,IAAIC,EAAAA,YAAoBC,iBAAiB,IAAID,EAAAA,QAAc,EAAG,EAAG,GAAI,GAEjD,EADhCX,GACgC,YAC7Ba,GAAUC,EAAAA,EAAAA,QAAoB,MAsBpC,OAXAC,EAAAA,EAAAA,IAAS,YAAgB,IAAbC,EAAY,EAAZA,MACLH,EAAQI,SAVD,SAACD,GAEb,IAAME,EAAIF,EAAMG,iBACVC,EAAY,KAClBP,EAAQI,QAAQI,SAASC,GAAKF,EAAYG,KAAKC,IAAI,EAAIN,GACvDL,EAAQI,QAAQQ,SAASC,GAAKN,EAAYG,KAAKI,IAAI,GAAMT,GACzDL,EAAQI,QAAQQ,SAASH,GAAKF,EAAYG,KAAKI,IAAI,GAAMT,EAC1D,CAMCU,CAAMZ,EACP,KAEDa,EAAAA,EAAAA,YAAU,WACRhB,EAAQI,QAAQa,0BAA0BpB,EAC3C,GAAE,CAACA,KAGF,kCAAOqB,IAAKlB,GAAab,GAAzB,cACE,SAAC,EAAAgC,SAAD,CAAUC,UAAU,SAAC7B,EAAD,IAApB,SAEII,EAAK0B,KAAI,SAACnC,EAAKoC,GACb,OAAO,SAAC,EAAD,CACLpC,IAAKA,EAEL,aAAYU,GAHP,gBAES0B,GAEjB,QAKV,C,gQCzDYC,EAAkB,SAAC,GAAD,IAAMpC,EAAN,2BAA+BO,EAAAA,EAAAA,KAAY,QACtEC,KAAM,CAAC6B,EAAoBC,GAC3B7B,eAAgB,EAChBC,aAAc,IAAIC,EAAAA,YAAoBC,iBAAiB,IAAID,EAAAA,QAAc,EAAG,EAAG,GAAI,IAChFX,GAJwB,EAO/B,G","sources":["components/modelBase.tsx","components/coasterBase.tsx","components/coasters/catalina/model.tsx"],"sourcesContent":["import { useGLTF } from '@react-three/drei'\n\nexport declare interface ModelBaseProps {\n    url: string;\n}\n\nexport const ModelBase = ({\n    url,\n    ...props\n}: ModelBaseProps): JSX.Element => {\n    const { scene } = useGLTF(url);\n\n    return (\n        <primitive object={scene} {...props} />\n    );\n}\n\nexport default ModelBase;","import { Suspense, useEffect, useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport ModelBase from \"./modelBase\";\n\nexport const CoasterModelPlaceholder = ({ ...props }): JSX.Element => {\n  return (\n    <mesh {...props}>\n      <boxGeometry args={[101.6, 12.7, 101.6]}></boxGeometry>\n      <meshStandardMaterial color={'beige'} />\n    </mesh>\n  );\n}\n\nexport declare interface CoasterBaseProps {\n  urls: string[];\n  importRotation: number;\n  orientation: THREE.Quaternion;\n}\n\nexport const CoasterBase = ({\n  urls,\n  importRotation = 0.0,\n  orientation = (new THREE.Quaternion()).setFromAxisAngle(new THREE.Vector3(0, 1, 0), 0),\n  ...props\n}: CoasterBaseProps): JSX.Element => {\n  const coaster = useRef<THREE.Group>(null!);\n\n  const hover = (clock: THREE.Clock) => {\n    // add slight hover effect\n    const t = clock.getElapsedTime()\n    const amplitude = 0.0005;\n    coaster.current.position.y += amplitude * Math.sin(1 * t);\n    coaster.current.rotation.z += amplitude * Math.cos(0.5 * t);\n    coaster.current.rotation.y += amplitude * Math.cos(0.7 * t);\n  }\n\n  useFrame(({ clock }) => {\n    if (!coaster.current) {\n      return;\n    }\n    hover(clock);\n  })\n\n  useEffect(() => {\n    coaster.current.setRotationFromQuaternion(orientation)\n  }, [orientation])\n\n  return (\n    <group ref={coaster} {...props}>\n      <Suspense fallback={<CoasterModelPlaceholder></CoasterModelPlaceholder>}>\n        {\n          urls.map((url, idx) => {\n            return <ModelBase\n              url={url}\n              key={`model-${idx}`}\n              rotation-y={importRotation}></ModelBase>;\n          })\n        }\n      </Suspense>\n    </group>\n  );\n}\n\nexport default CoasterBase;","import * as THREE from \"three\";\nimport { CoasterBase } from \"../../coasterBase\";\nimport MODEL_PATH_WATER from \"./water-draco.glb\";\nimport MODEL_PATH_COASTER from \"./coaster-draco.glb\";\n\nexport const CoasterCatalina = ({ ...props }): JSX.Element => CoasterBase({\n    urls: [MODEL_PATH_COASTER, MODEL_PATH_WATER],\n    importRotation: 0,\n    orientation: (new THREE.Quaternion()).setFromAxisAngle(new THREE.Vector3(0, 1, 0), 0),\n    ...props,\n});\n\nexport default CoasterCatalina;"],"names":["url","props","scene","useGLTF","object","CoasterModelPlaceholder","args","color","CoasterBase","urls","importRotation","orientation","THREE","setFromAxisAngle","coaster","useRef","useFrame","clock","current","t","getElapsedTime","amplitude","position","y","Math","sin","rotation","z","cos","hover","useEffect","setRotationFromQuaternion","ref","Suspense","fallback","map","idx","CoasterCatalina","MODEL_PATH_COASTER","MODEL_PATH_WATER"],"sourceRoot":""}